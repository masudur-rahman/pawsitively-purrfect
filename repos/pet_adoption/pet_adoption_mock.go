// Code generated by MockGen. DO NOT EDIT.
// Source: repos/pet_adoption.go

// Package pet_adoption is a generated GoMock package.
package pet_adoption

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPetAdoptionRepository is a mock of PetAdoptionRepository interface.
type MockPetAdoptionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPetAdoptionRepositoryMockRecorder
}

// MockPetAdoptionRepositoryMockRecorder is the mock recorder for MockPetAdoptionRepository.
type MockPetAdoptionRepositoryMockRecorder struct {
	mock *MockPetAdoptionRepository
}

// NewMockPetAdoptionRepository creates a new mock instance.
func NewMockPetAdoptionRepository(ctrl *gomock.Controller) *MockPetAdoptionRepository {
	mock := &MockPetAdoptionRepository{ctrl: ctrl}
	mock.recorder = &MockPetAdoptionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPetAdoptionRepository) EXPECT() *MockPetAdoptionRepositoryMockRecorder {
	return m.recorder
}

// AddPetAdoption mocks base method.
func (m *MockPetAdoptionRepository) AddPetAdoption(petID, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPetAdoption", petID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPetAdoption indicates an expected call of AddPetAdoption.
func (mr *MockPetAdoptionRepositoryMockRecorder) AddPetAdoption(petID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPetAdoption", reflect.TypeOf((*MockPetAdoptionRepository)(nil).AddPetAdoption), petID, userID)
}

// GetPetOwner mocks base method.
func (m *MockPetAdoptionRepository) GetPetOwner(petID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPetOwner", petID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPetOwner indicates an expected call of GetPetOwner.
func (mr *MockPetAdoptionRepositoryMockRecorder) GetPetOwner(petID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPetOwner", reflect.TypeOf((*MockPetAdoptionRepository)(nil).GetPetOwner), petID)
}

// ListPetsAdoptedByUser mocks base method.
func (m *MockPetAdoptionRepository) ListPetsAdoptedByUser(userID string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPetsAdoptedByUser", userID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPetsAdoptedByUser indicates an expected call of ListPetsAdoptedByUser.
func (mr *MockPetAdoptionRepositoryMockRecorder) ListPetsAdoptedByUser(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPetsAdoptedByUser", reflect.TypeOf((*MockPetAdoptionRepository)(nil).ListPetsAdoptedByUser), userID)
}

// RemovePetAdoption mocks base method.
func (m *MockPetAdoptionRepository) RemovePetAdoption(petID, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePetAdoption", petID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemovePetAdoption indicates an expected call of RemovePetAdoption.
func (mr *MockPetAdoptionRepositoryMockRecorder) RemovePetAdoption(petID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePetAdoption", reflect.TypeOf((*MockPetAdoptionRepository)(nil).RemovePetAdoption), petID, userID)
}
