// Code generated by MockGen. DO NOT EDIT.
// Source: repos/pet.go

// Package pet is a generated GoMock package.
package pet

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/masudur-rahman/pawsitively-purrfect/models"
)

// MockPetRepository is a mock of PetRepository interface.
type MockPetRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPetRepositoryMockRecorder
}

// MockPetRepositoryMockRecorder is the mock recorder for MockPetRepository.
type MockPetRepositoryMockRecorder struct {
	mock *MockPetRepository
}

// NewMockPetRepository creates a new mock instance.
func NewMockPetRepository(ctrl *gomock.Controller) *MockPetRepository {
	mock := &MockPetRepository{ctrl: ctrl}
	mock.recorder = &MockPetRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPetRepository) EXPECT() *MockPetRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockPetRepository) Delete(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockPetRepositoryMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPetRepository)(nil).Delete), id)
}

// FindByAdoptionStatus mocks base method.
func (m *MockPetRepository) FindByAdoptionStatus(status models.PetAdoptionStatus) ([]*models.Pet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByAdoptionStatus", status)
	ret0, _ := ret[0].([]*models.Pet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByAdoptionStatus indicates an expected call of FindByAdoptionStatus.
func (mr *MockPetRepositoryMockRecorder) FindByAdoptionStatus(status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByAdoptionStatus", reflect.TypeOf((*MockPetRepository)(nil).FindByAdoptionStatus), status)
}

// FindByBreed mocks base method.
func (m *MockPetRepository) FindByBreed(breed string) ([]*models.Pet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByBreed", breed)
	ret0, _ := ret[0].([]*models.Pet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByBreed indicates an expected call of FindByBreed.
func (mr *MockPetRepositoryMockRecorder) FindByBreed(breed interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByBreed", reflect.TypeOf((*MockPetRepository)(nil).FindByBreed), breed)
}

// FindByCurrentOwnerID mocks base method.
func (m *MockPetRepository) FindByCurrentOwnerID(id string) ([]*models.Pet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByCurrentOwnerID", id)
	ret0, _ := ret[0].([]*models.Pet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByCurrentOwnerID indicates an expected call of FindByCurrentOwnerID.
func (mr *MockPetRepositoryMockRecorder) FindByCurrentOwnerID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByCurrentOwnerID", reflect.TypeOf((*MockPetRepository)(nil).FindByCurrentOwnerID), id)
}

// FindByGender mocks base method.
func (m *MockPetRepository) FindByGender(gender string) ([]*models.Pet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByGender", gender)
	ret0, _ := ret[0].([]*models.Pet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByGender indicates an expected call of FindByGender.
func (mr *MockPetRepositoryMockRecorder) FindByGender(gender interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByGender", reflect.TypeOf((*MockPetRepository)(nil).FindByGender), gender)
}

// FindByID mocks base method.
func (m *MockPetRepository) FindByID(id string) (*models.Pet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id)
	ret0, _ := ret[0].(*models.Pet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockPetRepositoryMockRecorder) FindByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockPetRepository)(nil).FindByID), id)
}

// FindByOriginShelterID mocks base method.
func (m *MockPetRepository) FindByOriginShelterID(id string) ([]*models.Pet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByOriginShelterID", id)
	ret0, _ := ret[0].([]*models.Pet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByOriginShelterID indicates an expected call of FindByOriginShelterID.
func (mr *MockPetRepositoryMockRecorder) FindByOriginShelterID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByOriginShelterID", reflect.TypeOf((*MockPetRepository)(nil).FindByOriginShelterID), id)
}

// FindByShelterID mocks base method.
func (m *MockPetRepository) FindByShelterID(id string) ([]*models.Pet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByShelterID", id)
	ret0, _ := ret[0].([]*models.Pet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByShelterID indicates an expected call of FindByShelterID.
func (mr *MockPetRepositoryMockRecorder) FindByShelterID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByShelterID", reflect.TypeOf((*MockPetRepository)(nil).FindByShelterID), id)
}

// FindPets mocks base method.
func (m *MockPetRepository) FindPets(filter models.Pet) ([]*models.Pet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPets", filter)
	ret0, _ := ret[0].([]*models.Pet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPets indicates an expected call of FindPets.
func (mr *MockPetRepositoryMockRecorder) FindPets(filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPets", reflect.TypeOf((*MockPetRepository)(nil).FindPets), filter)
}

// Save mocks base method.
func (m *MockPetRepository) Save(pet *models.Pet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", pet)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockPetRepositoryMockRecorder) Save(pet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockPetRepository)(nil).Save), pet)
}

// Update mocks base method.
func (m *MockPetRepository) Update(pet *models.Pet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", pet)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockPetRepositoryMockRecorder) Update(pet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPetRepository)(nil).Update), pet)
}
